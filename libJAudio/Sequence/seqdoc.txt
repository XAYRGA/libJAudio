JAISEQ DOC

	// JAISEQ Doc by Xayrga.
	// http://www.xayr.ga/
	// code@xayr.ga  
	// This format is 1-1 with JaiSeq itself.  Meaning that the order these parameters are in are the same as the actual sequence. 
	// the "rI"(represented as r) and "rF"(represented as f) sections of a sequence object are updated every time an op is loaded, so this means what when you receive one of these events
	// that you can pull the data off of the rI and rF. 
	// The actual sequence registers are represented as "Registers[]"
	// the "rF" is an exception -- this is just a utility register group. The sequence is not actually read with that. 
	// Last updated 10/6/2019

	// Register Based Arithmetic
	(v1) 0xA1 = ADD REGISTER (ADDR)
		r0 = (byte)destination_register
		r1 = (byte)source_register
		r2 = (short)sum (Stores result in RG(destination_register))
		~op: 
			Registers[destination_register] += Registers[source_register]

	(v1) 0xA2 = Multiply Regtister (MULR)
		r0 = (byte)destination_register
		r1 = (byte)source_register
		r2 = (short)product (Stores result in RG(destination_register))
		~op:
			Registers[destination_register] *= Registers[source_register]

	(v1) 0xA3 = Compare Register (CMPR)
		r0 = (byte)destination_register
		r1 = (byte)source_register
		r2 = (short) difference (Sets RG3)
		~op:
			Registers[3] = Registers[destination_register] -  Registers[source_register]; // Note that 3 is the comparerator operator!

	(v1) 0xA5 = Add int8 (ADD8)
		r0 = (byte)destination_register
		r1 = (byte)value
		r2 = (short)sum (Stores result in RG(destination_register))
		~op:
			Registers[destination_register] += value;

	(v1) 0xA6 = Multiply 8 (MUL8)
		r0 = (byte)destination_register
		r1 = (byte)value
		r2 = (short)product (Stores result in RG(destination_register))
		~op: 
			Registers[destination_register] *= value;

    (v1) 0xA7 = Compare 8 (CMP8)
		r0 = (byte)destination_register 
		r1 = (byte)value
		r2 = (short) difference (Sets RG3)
		~op:
			Registers[3] = Registers[destination_register] - value; // Note that 3 is the comparerator operator!

	JAISeqEvent.ADD16:
		r0 = (byte)destination_register
		r1 = (short)value
		r2 = (short)sum (Stores result in RG(destination_register))
		~op:
			Registers[destination_register] += value;

	JAISeqEvent.MUL16:
		r0 = (byte)destination_register
		r1 = (short)value
		r2 = (short)product (Stores result in RG(destination_register))
		~op: 
			Registers[destination_register] *= value;

	JAISeqEvent.CMP16:
		r0 = (byte)destination_register 
		r1 = (short)value
		r2 = (short) difference (Sets RG3)
		~op:
			Registers[3] = Registers[destination_register] - value; // Note that 3 is the comparerator operator!

	// PERF OPERATIONS
	JAISeqEvent.PERF_U8_NODUR:
		r0 = (byte)perfID
		r1 = (byte)value
		r2 = (byte)delay (0)
		f0 = (float)value/256

	JAISeqEvent.PERF_U8_DUR_U8:
		r0 = (byte)perfID
		r1 = (byte)value
		r2 = (byte)delay
		f0 = (float)value/256

	JAISeqEvent.PERF_U8_DUR_U16:
		r0 = (byte)perfID
		r1 = (byte)value
		r2 = (ushort)delay
		f0 = (float)value/256

	JAISeqEvent.PERF_S8_NODUR:
		r0 = (byte)perfID
		r1 = (sbyte)value
		r2 = (byte)delay (0)
		f0 = (float)value/128

	JAISeqEvent.PERF_S8_DUR_U8:
		r0 = (byte)perfID
		r1 = (sbyte)value
		r2 = (byte)delay
		f0 = (float)value/128

	JAISeqEvent.PERF_S8_DUR_U16:
		r0 = (byte)perfID
		r1 = (sbyte)value
		r2 = (ushort)delay
		f0 = (float)value/128

	JAISeqEvent.PERF_S16_NODUR:
		r0 = (byte)perfID
		r1 = (short)value
		r2 = (byte)delay (0)
		f0 = (float)value/‭32767‬f

	JAISeqEvent.PERF_S16_DUR_U8:
		r0 = (byte)perfID
		r1 = (short)value
		r2 = (byte)delay
		f0 = (float)value/‭32767‬f

	JAISeqEvent.PERF_S8_DUR_U16:
		r0 = (byte)perfID
		r1 = (short)value
		r2 = (ushort)delay
		f0 = (float)value/‭32767‬f

	// PARAM aka "writeRegParam" aka "REGISTER" operations.

	JAISeqEvent.READPORT:
		r0 = (byte)port_id
		r1 = (byte)dest_reg
		~op:
			Registers[dest_reg] = Ports[port_id]
			Registers[3] = Ports[port_id]; // i don't know either, 

	JAISeqEvent.WRITEPORT:
		r0 = (byte)port_id 
		r1 = (byte)source_reg
		~op:
			Ports[port_id] = Registers[source_reg]

	JAISeqEvent.PARAM_SET_R:
		r0 = (byte)source_reg
		r1 = (byte)dest_reg:
		~op:
			Registers[source_reg] = Registers[dest_reg] 

	JAISeqEvent.J2_SET_PARAM_8:
	JAISeqEvent.PARAM_SET_8:
		r0 = (byte)dest_reg
		r1 = (byte)value
		~op
			Registers[dest_reg] = value

	JAISeqEvent.J2_SET_PARAM_16:
	JAISeqEvent.PARAM_SET_16:
		r0 = (byte)dest_reg
		r1 = (byte)value
		~op
			Registers[dest_reg] = value

	JAISeqEvent.J2_SET_BANK:
		r0 = (byte)bank
		~op:
			Registers[0x24] = bank

	JAISeqEvent.J2_SET_PROG:
		r0 = (byte)bank
		~op:
			Registers[0x23] = bank

	JAISeqEvent.J2_TEMPO: 
	JAISeqEvent.TEMPO: 
		r0 = (short)tempo
		~op:
			Sequence.Tempo = tempo;

	JAISeqEvent.TIME_BASE: 
		r0 = (short)timebase
		~op:
			Sequence.Tempo = timebase;

	JAISeqEvent.J2_SET_ARTIC:
		r0 = (byte)type
		r1 = (short)value 
		~op:
			Sequence.timebase = value

	 // FLOW OPERATIONS
	JAISeqEvent.OPEN_TRACK:
		rI[0] = (byte)trackID
		rI[1] = (int24)track_address
		~op:
			Subroutine[trackID] = new Subroutine(BMSData,track_address)

	JAISeqEvent.FIN:
		< no arguments >
		~op:
			Subroutine.stop()

	JAISeqEvent.WAIT_VAR: 
		r0 = (VAIRABLE LENGTH QUANTITY)(int)delay
		~op:
			Subroutine.delay += delay

	JAISeqEvent.WAIT_REGISTER:
		r0 = (byte)register
		~op:
			Subroutine.delay += Registers[register]

	JAISeqEvent.WAIT_8:
		r0 = (byte)delay 
		~op:
			Subroutine.delay += delay

	JAISeqEvent.WAIT_16:
		r0 = (short)delay
		~op:
			Subroutine.delay += delay

	JAISeqEvent.JUMP:
		r0 = (int)address
		~op:
			Subroutine.PC = address:

	JAISeqEvent.JUMP_CONDITIONAL:
		r0 = (byte)flags
		r1 = (int24)address
		~op:
			if (CONDITION(flags & 15)) { Subroutine.PC = address }

	JAISeqEvent.RETURN_CONDITIONAL:
		r0 = (byte)flags
		~op:
			if (CONDITION(flags & 15)) { Subroutine.PC = ReturnStack.Pop() }

	JAISeqEvent.CALL_CONDITIONAL:
		r0 = (byte)flags
		r1 = (int24)address
		~op:
			ReturnStack.Push(Subroutine.PC);
			if (CONDITION(flags & 15)) { Subroutine.PC = address }

	JAISeqEvent.RETURN:
		<no arguments>
		~op:
			Subroutine.PC = ReturnStack.Pop()


